const tailwindcss = require('tailwindcss');
const postcssPresetEnv = require('postcss-preset-env');


const nodeEnv = process.env.NODE_ENV;
/**
 * Default paths, relative to /app/src:
 * {
 *   icons: "icons",
 *   scss: "scss",
 *   js: "js"
 * }
 *
 * To override or add path values, pass an object to `buildPaths()`
 * e.g. `require('./webpack-default.mix.js').buildPaths({ icons: "custom-icons", newPath: "new-directory" });`
 *
 * The following path names are reserved by the builder and cannot be overwritten:
 *   srcRoot, dist, images, fonts
 */
const assetPaths = require('./webpack-default.mix.js').buildPaths();

const mix = require('./webpack-default.mix.js').defaultMix(assetPaths);
const spritePrefixer = require('./webpack-default.mix.js').spritePrefixer(
  assetPaths
);

/**
 * Begin custom Mix steps
 */

mix
  .then(() => {
    console.log(`NODE_ENV = ${nodeEnv}`);
  })
  .sass(
    `${assetPaths.srcRoot}/${assetPaths.scss}/tailwind.scss`,
    `${assetPaths.dist}/css/`
  )
  .options({
    processCssUrls: false,
    postCss: [
      tailwindcss('./tailwind.config.js'),
      postcssPresetEnv()
    ],
  })
  // .js(`${assetPaths.srcRoot}/index.js`, `${assetPaths.dist}/`)
  .svgSprite(`${assetPaths.srcRoot}/${assetPaths.icons}/**/*.svg`, {
    output: {
      filename: `dist/icons/icon-sprites.svg`,
      svg4everybody: true,
    },
    sprite: {
      prefix: spritePrefixer,
      generate: {
        title: false,
      },
    },
  });

// if (node_env === 'production' ) {
//   const componentJs = glob.sync(`components/**/*.js`);

//   componentJs.forEach((file) => {
//     mix.js(file, `${assetPaths.dist}/components/js/`);
//   });
// }

// Available Mix Tools
// Some additional tools are available, but are not useful for our builder
// See https://laravel-mix.com/docs/5.0/ for more choices
// mix.js(src, output);
// mix.react(src, output); <-- Identical to mix.js(), but registers React Babel compilation.
// mix.preact(src, output); <-- Identical to mix.js(), but registers Preact compilation.
// mix.coffee(src, output); <-- Identical to mix.js(), but registers CoffeeScript compilation.
// mix.ts(src, output); <-- TypeScript support. Requires tsconfig.json to exist in the same folder as webpack.mix.js
// mix.extract(vendorLibs);
// mix.sass(src, output);
// mix.less(src, output);
// mix.stylus(src, output);
// mix.postCss(src, output, [require('postcss-some-plugin')()]);
// mix.svgSprite(srcGlob, outputOptions) <-- Extension. See https://github.com/cascornelissen/svg-spritemap-webpack-plugin/blob/master/docs/options.md
// mix.combine(files, destination);
// mix.babel(files, destination); <-- Identical to mix.combine(), but also includes Babel compilation.
// mix.copy(from, to);
// mix.copyDirectory(fromDir, toDir);
// mix.minify(file);
// mix.sourceMaps(); // Enable sourcemaps
// mix.version(); // Enable versioning.
// mix.autoload({}); <-- Will be passed to Webpack's ProvidePlugin.
// mix.webpackConfig({}); <-- Override webpack.config.js, without editing the file directly.
// mix.babelConfig({}); <-- Merge extra Babel configuration (plugins, etc.) with Mix's default.
// mix.then(function () {}) <-- Will be triggered each time Webpack finishes building.
// mix.when(condition, function (mix) {}) <-- Call function if condition is true.
// mix.override(function (webpackConfig) {}) <-- Will be triggered once the webpack config object has been fully generated by Mix.
// mix.dump(); <-- Dump the generated webpack config object to the console.
// mix.extend(name, handler) <-- Extend Mix's API with your own components.
// mix.options({
//   extractVueStyles: false, // Extract .vue component styling to file, rather than inline.
//   globalVueStyles: file, // Variables file to be imported in every component.
//   processCssUrls: true, // Process/optimize relative stylesheet url()'s. Set to false, if you don't want them touched.
//   purifyCss: false, // Remove unused CSS selectors.
//   terser: {}, // Terser-specific options. https://github.com/webpack-contrib/terser-webpack-plugin#options
//   postCss: [] // Post-CSS options: https://github.com/postcss/postcss/blob/master/docs/plugins.md
// });
